services:
  nethermind_execution_l2:
    image: nethermindeth/nethermind:ccc88f011
    container_name: l2-nethermind-execution-client
    restart: unless-stopped
    pull_policy: always
    stop_grace_period: 3m
    tty: true
    volumes:
      - ./execution-data-taiko:/data/taiko-nethermind
      - ./static/jwtsecret:/tmp/jwt/jwtsecret
      - ${CHAINSPEC_PATH_ON_HOST:-./static/hoodi/chainspec.json}:/chainspec.json
    networks:
      - surge
    ports:
      - ${L2_NETWORK_DISCOVERY_PORT}:${L2_NETWORK_DISCOVERY_PORT}/tcp
      - ${L2_NETWORK_DISCOVERY_PORT}:${L2_NETWORK_DISCOVERY_PORT}/udp
      - ${L2_METRICS_PORT}:${L2_METRICS_PORT}
      - ${L2_HTTP_PORT}:${L2_HTTP_PORT}
      - ${L2_WS_PORT}:${L2_WS_PORT}
      - ${L2_ENGINE_API_PORT}:${L2_ENGINE_API_PORT}
    command:
      - --config=none
      - --datadir=/data/taiko-nethermind
      - --Init.ChainSpecPath=/chainspec.json
      - --Init.GenesisHash=${L2_GENESIS_HASH}
      - --Init.DiscoveryEnabled=false
      - --Metrics.Enabled=true
      - --Metrics.ExposePort=${L2_METRICS_PORT}
      - --JsonRpc.Enabled=true
      - --JsonRpc.EnabledModules=[debug,eth,net,web3,txpool,rpc,subscribe,trace,personal,proof,parity,health]
      - --JsonRpc.Host=0.0.0.0
      - --JsonRpc.Port=${L2_HTTP_PORT}
      - --JsonRpc.WebSocketsPort=${L2_WS_PORT}
      - --JsonRpc.JwtSecretFile=/tmp/jwt/jwtsecret
      - --JsonRpc.EngineHost=0.0.0.0
      - --JsonRpc.EnginePort=${L2_ENGINE_API_PORT}
      - --Network.DiscoveryPort=${L2_NETWORK_DISCOVERY_PORT}
      - --Network.P2PPort=${L2_NETWORK_DISCOVERY_PORT}
      - --Sync.FastSync=false
      - --Sync.SnapSync=false
      - --HealthChecks.Enabled=true
      - --log=${NETHERMIND_LOG_LEVEL}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'echo > /dev/tcp/localhost/8547'"]
      interval: 2s
      timeout: 2s
      retries: 15
      start_period: 10s
    profiles:
      - nethermind_execution_l2
      - proposer
      - prover
      - blockscout

  taiko_client_driver:
    image: ghcr.io/khajievn/taiko-client:latest
    container_name: l2-taiko-consensus-client
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
    volumes:
      - ./execution-data-taiko:/data/taiko-nethermind
      - ./static/jwtsecret:/tmp/jwt/jwtsecret
      - ./script:/script
    ports:
      - 6060:6060
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    entrypoint:
      - /bin/sh
      - -c
      - "/script/start-driver.sh"
    networks:
      - surge
    profiles:
      - nethermind_execution_l2
      - proposer
      - prover
      - blockscout

  taiko_client_prover_relayer:
    image: ghcr.io/khajievn/taiko-client:latest
    container_name: l2-taiko-prover-relayer-client
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
      - taiko_client_driver
    volumes:
      - ./static/jwtsecret:/tmp/jwt/jwtsecret
      - ./script:/script
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    entrypoint:
      - /bin/sh
      - -c
      - "/script/start-prover-relayer.sh"
    networks:
      - surge
    profiles:
      - prover
      - blockscout

  taiko_client_proposer:
    image: ghcr.io/khajievn/taiko-client:latest
    container_name: l2-taiko-proposer-client
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
      - taiko_client_driver
    volumes:
      - ./execution-data-taiko:/data/taiko-nethermind
      - ./static/jwtsecret:/tmp/jwt/jwtsecret
      - ./script:/script
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    entrypoint:
      - /bin/sh
      - -c
      - "/script/start-proposer.sh"
    networks:
      - surge
    profiles:
      - proposer
      - blockscout

  taiko-blockscout-postgres:
    image: postgres:alpine
    container_name: taiko-blockscout-postgres
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
      - taiko_client_driver
    volumes:
      - ./blockscout-postgres-data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_DB: blockscout
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: MyPassword1!
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      GOSU_VERSION: 1.17
      PG_MAJOR: 17
      PG_VERSION: 17.0
      PG_SHA256: 7e276131c0fdd6b62588dbad9b3bb24b8c3498d5009328dba59af16e819109de
      DOCKER_PG_LLVM_DEPS: llvm15-dev \t\tclang15
      PGDATA: /var/lib/postgresql/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - "-c"
      - "max_connections=1000"
    networks:
      - surge
    profiles:
      - blockscout

  taiko-blockscout-verif:
    platform: linux/amd64
    image: ghcr.io/blockscout/smart-contract-verifier:v1.6.0
    container_name: taiko-blockscout-verif
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
      - taiko_client_driver
    ports:
      - ${VERIFIER_PORT}:${VERIFIER_PORT}
    environment:
      SMART_CONTRACT_VERIFIER__SERVER__HTTP__ADDR: 0.0.0.0:${VERIFIER_PORT}
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      SMART_CONTRACT_VERIFIER__SOLIDITY__COMPILERS_DIR: /tmp/solidity-compilers
      SMART_CONTRACT_VERIFIER__SOLIDITY__REFRESH_VERSIONS_SCHEDULE: 0 0 * * * * *
      APP_USER: app
      SMART_CONTRACT_VERIFIER__SOLIDITY__ENABLED: true
      SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL: https://solc-bin.ethereum.org/linux-amd64/list.json
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command:
      - "./smart-contract-verifier-server"
    networks:
      - surge
    profiles:
      - blockscout

  taiko-blockscout:
    image: blockscout/blockscout:6.6.0
    container_name: taiko-blockscout
    restart: unless-stopped
    pull_policy: always
    depends_on:
      - nethermind_execution_l2
      - taiko_client_driver
    ports:
      - ${BLOCKSCOUT_PORT}:${BLOCKSCOUT_PORT}
    environment:
      DATABASE_URL: postgresql://postgres:MyPassword1!@taiko-blockscout-postgres:5432/blockscout
      API_V2_ENABLED: true
      ETHEREUM_JSONRPC_VARIANT: nethermind
      MICROSERVICE_SC_VERIFIER_URL: http://taiko-blockscout-verif:${VERIFIER_PORT}/api
      ETHEREUM_JSONRPC_HTTP_URL: http://l2-nethermind-execution-client:${L2_HTTP_PORT}/
      INDEXER_DISABLE_PENDING_TRANSACTIONS_FETCHER: true
      SUBNETWORK: Surge
      ETHEREUM_JSONRPC_TRACE_URL: http://l2-nethermind-execution-client:${L2_HTTP_PORT}/
      COIN: ETH
      MICROSERVICE_SC_VERIFIER_TYPE: sc_verifier
      PORT: ${BLOCKSCOUT_PORT}
      MICROSERVICE_SC_VERIFIER_ENABLED: true
      ECTO_USE_SSL: false
      SECRET_KEY_BASE: 56NtB48ear7+wMSf0IQuWDAAazhpb31qyc7GiyspBP2vh7t5zlCsF5QDv76chXeN
      CHAIN_ID: ${L2_CHAIN_ID}
      SHOW_TESTNET_LABEL: false
      DISABLE_EXCHANGE_RATES: true
      DISABLE_KNOWN_TOKENS: true
      INDEXER_INTERNAL_TRANSACTIONS_BATCH_SIZE: 10000
      INDEXER_HIDE_INDEXING_PROGRESS_ALERT: false
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      RELEASE_VERSION: 6.6.0
      CHAIN_TYPE:
      BRIDGED_TOKENS_ENABLED:
      BLOCKSCOUT_VERSION: v6.6.0-beta
      SMART_CONTRACT_VERIFIER__SOLIDITY__ENABLED: true
      SMART_CONTRACT_VERIFIER__SOLIDITY__FETCHER__LIST__LIST_URL: https://solc-bin.ethereum.org/linux-amd64/list.json
    command:
      - "/bin/sh"
      - "-c"
      - "bin/blockscout eval \"Elixir.Explorer.ReleaseTasks.create_and_migrate()\" && bin/blockscout start"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - surge
    profiles:
      - blockscout

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 9090:9090
    networks:
      - surge
    profiles:
      - metrics

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3001:3000
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./grafana/config.ini:/etc/grafana/config.ini
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    command: >
      --config /etc/grafana/config.ini
    networks:
      - surge
    profiles:
      - metrics

volumes:
  prometheus_data:

networks:
  surge:
    name: surge-network
