############################### DEFAULT #####################################
ENABLE_TAIKO_CLIENT_METRICS=true

CHAINSPEC_PATH_ON_HOST=./static/hoodi/chainspec.json

BRIDGE_32_BYTES=0x6272696467650000000000000000000000000000000000000000000000000000
SIGNAL_SERVICE_32_BYTES=0x7369676e616c5f73657276696365000000000000000000000000000000000000
ERC20_VAULT_32_BYTES=0x65726332305f7661756c74000000000000000000000000000000000000000000

# Tier addresses
RISC0_VERIFIER=0x2AABf75c8C0Dda09292f5dA4D40518C19ACDa7C3
SP1_VERIFIER=0x236f12b0Ec378D4AD81930C6a7aFE453f20FB8f3
SGX_VERIFIER=0x438d3cDF0F3A1FC133a70afF6D6041daBB12C65D

# L1
L1_CHAIN_ID=560048

L1_BRIDGE_ADDRESS=0x4d469D3c2D17252A688da5613571A43a109F4F89
L1_SIGNAL_SERVICE_ADDRESS=0x894093E8F90F2846Ff1B36fF66E97Ed0FF0AD1d5
L1_SHARED_ADDRESS_MANAGER=0x4A04B50DE097Deb4BECc2c01BB709d1Ac7635758
L1_ERC20_VAULT_ADDRESS=0x0b727E9F498cF177ee5100d9d6cBc78E04D5cC75
TAIKO_L1_ADDRESS=0x4bBeF0eFDe3692b9B31BaCDA30f933D223f18A82

L1_ENDPOINT_HTTP=https://l1-rpc.hoodi.surge.wtf
L1_ENDPOINT_WS=wss://l1-ws.hoodi.surge.wtf
L1_BEACON_HTTP=https://l1-beacon.hoodi.surge.wtf

# L2
L2_CHAIN_ID=763375
L2_GENESIS_HASH=0xf4ca134e6355f2225d89119e9ddb917910b4fad86cf8c9d8640b8ddab292c0a1

L2_BRIDGE_ADDRESS=0x7633750000000000000000000000000000000001
L2_SIGNAL_SERVICE_ADDRESS=0x7633750000000000000000000000000000000005
L2_SHARED_ADDRESS_MANAGER=0x7633750000000000000000000000000000000006
L2_ERC20_VAULT_ADDRESS=0x7633750000000000000000000000000000000002
TAIKO_L2_ADDRESS=0x7633750000000000000000000000000000010001

L2_ENDPOINT_HTTP=http://host.docker.internal:8547
L2_ENDPOINT_WS=ws://host.docker.internal:8548
L2_AUTH_HTTP=http://host.docker.internal:8552

# Nethermind log level
NETHERMIND_LOG_LEVEL=debug

# Surge
SURGE_PROPOSING_BLOCK_GAS=
SURGE_PROVING_BLOCK_GAS=
SURGE_OFF_CHAIN_COSTS=
SURGE_PRICE_FLUCTUATION_MODIFIER=

# Exposed ports
L2_METRICS_PORT=8018
L2_HTTP_PORT=8547
L2_WS_PORT=8548
L2_ENGINE_API_PORT=8552
L2_NETWORK_DISCOVERY_PORT=30313
POSTGRES_PORT=5432
VERIFIER_PORT=8050
BLOCKSCOUT_PORT=4000
PROMETHEUS_PORT=9091
GRAFANA_PORT=3001

# Comma separated L2 execution engine bootnode URLs for P2P discovery bootstrap
BOOT_NODES=

# P2P
DISABLE_P2P_SYNC=true
P2P_SYNC_URL=

############################### REQUIRED #####################################
# Owner private key for contract deployments
OWNER_PRIVATE_KEY=

# Profitability check
CHECK_PROFITABILITY=false

# Allow empty blocks
ALLOW_EMPTY_BLOCKS=false

############################### OPTIONAL #####################################
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=true
# SGX Raiko service endpoint, required if not running a guardian prover.
SGX_RAIKO_HOST=
# ZKVM Raiko service endpoint.
RAIKO_HOST_ZKVM=
# ZKVM Raiko service configs
RAIKO_REQUEST_TIMEOUT=60s
RAIKO_SP1_RECURSION="plonk"
RAIKO_SP1_PROVER="local"
RAIKO_RISC0_BONSAI=false
RAIKO_RISC0_SNARK=true
RAIKO_RISC0_PROFILE=false
RAIKO_RISC0_EXECUTION_PO2=20
# How many provers you want to run concurrently.
PROVER_CAPACITY=1
# A L1 account private key (with a balance of TTKOh deposited on TaikoL1) which will be used to sign the bond for proving the block.
# WARNING: only use a test account, pasting your private key in plain text here is not secure.
L1_PROVER_PRIVATE_KEY=
# Amount to approve TaikoL1 contracts for TaikoToken usage. i.e 250 TTKOh = 250
TOKEN_ALLOWANCE=
# Minimum ETH balance (in ETH) a prover wants to keep.
MIN_ETH_BALANCE=
# Minimum Taiko token balance (in ether) a prover wants to keep. i.e 250 TTKOh = 250
MIN_TAIKO_BALANCE=
# Whether to prove unassigned blocks or not (blocks that have expired their proof window
# without the original prover submitting a proof.).
PROVE_UNASSIGNED_BLOCKS=false

# If you want to be a proposer who proposes L2 execution engine's transactions in mempool to Taiko L1 protocol
# contract (be a "mining L2 node"), you need to change `ENABLE_PROPOSER` to true, then fill `L1_PROPOSER_PRIVATE_KEY`.
ENABLE_PROPOSER=true
# A L1 account (with balance) private key who will send TaikoL1.proposeBlock transactions.
L1_PROPOSER_PRIVATE_KEY=
# Address of the proposed block's suggested L2 fee recipient.
L2_SUGGESTED_FEE_RECIPIENT=0xD51a7E12997f6f1D04AcCC2b4053307a62b373cb
# Contract address of the signal service on L1. the purpose is to listen to events coming from this contract and when a new bridge in is detected, we force propose a block on taiko proposer
INBOX_ADDRESS=0x4d469D3c2D17252A688da5613571A43a109F4F89
# Comma-delineated list (no spaces) of prover endpoints proposer should query when attempting to propose a block
# If you keep this default value you must also enable a prover by setting ENABLE_PROVER=false
# Whether to send EIP-4844 blob transactions when proposing blocks.
BLOB_ALLOWED=true
# Minimum tip (in GWei) for a transaction to propose.
EPOCH_MIN_TIP=
# Time interval to propose L2 pending transactions
EPOCH_INTERVAL=5s
# ProverSet Address: We highly recommend you consult the deploy a proverset guide and use separate EOAs for prover and proposer to prevent nonce issues.
PROVER_SET=

# Comma-delimited local tx pool addresses you want to prioritize, useful to set your proposer to only propose blocks with your prover's transactions.
TXPOOL_LOCALS=

# Transaction Manager Flags (Leave blank if using default values.) These only affect Prover and Proposer.

# The multiplier applied to fee suggestions to put a hard limit on fee increases
TX_FEE_LIMIT_MULTIPLIER=
# The minimum threshold (in GWei) at which fee bumping starts to be capped. Allows arbitrary fee bumps below this threshold.
TX_FEE_LIMIT_THRESHOLD=
# Gas limit will be used for transactions (0 means using gas estimation)
TX_GAS_LIMIT=1000000
# Enforces a minimum base fee (in GWei) to assume when determining tx fees. 1 GWei by default
TX_MIN_BASEFEE=
# Enforces a minimum tip cap (in GWei) to use when determining tx fees. 1 GWei by default.
TX_MIN_TIP_CAP=
# Timeout for aborting a tx send if the tx does not make it to the mempool.
TX_NOT_IN_MEMPOOL_TIMEOUT=30s
# Number of confirmations which we will wait after sending a transaction
TX_NUM_CONFIRMATIONS=
# Frequency to poll for receipts
TX_RECEIPT_QUERY_INTERVAL=
# Duration we will wait before resubmitting a transaction to L1
TX_RESUBMISSION=10s
# Number of ErrNonceTooLow observations required to give up on a tx at a particular nonce without receiving confirmation
TX_SAFE_ABORT_NONCE_TOO_LOW=
# Timeout for sending transactions. If 0 it is disabled.
TX_SEND_TIMEOUT=
